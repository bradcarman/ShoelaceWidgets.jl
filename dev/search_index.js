var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Header-Functions","page":"API Reference","title":"Header Functions","text":"","category":"section"},{"location":"api/#ShoelaceWidgets.get_shoelace","page":"API Reference","title":"ShoelaceWidgets.get_shoelace","text":"get_shoelace()\n\nReturns an array of DOM elements (link and script tags) needed to load the Shoelace web component library from CDN. This should be included in the document head of your Bonito application.\n\nExample\n\napp = App() do session\n    DOM.html(\n        DOM.head(get_shoelace()...),\n        DOM.body(input)\n    )\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#Input-Components","page":"API Reference","title":"Input Components","text":"","category":"section"},{"location":"api/#Input","page":"API Reference","title":"Input","text":"","category":"section"},{"location":"api/#ShoelaceWidgets.SLInput","page":"API Reference","title":"ShoelaceWidgets.SLInput","text":"SLInput(default; label=\"\", help=\"\", placeholder=\"\")\n\nCreates a reactive input field widget. The input value is synchronized with Julia through an Observable.\n\nFields\n\nvalue::Observable{T} - Observable containing the current input value\nlabel::String - Label text displayed above the input\ntype::String - HTML input type (automatically determined from value type)\nhelp::String - Help text displayed below the input\nplaceholder::String - Placeholder text shown when input is empty\n\nExamples\n\n# Text input\ninput = SLInput(\"\"; label=\"Name\", placeholder=\"Enter your name\")\n\n# Number input\nnum_input = SLInput(0.0; help=\"Enter a number from 1 to 10\")\n\n# Date input\ndate_input = SLInput(Date(2024, 1, 1); label=\"Select date\")\n\n# Access the value\nprintln(input.value[])  # Get current value\ninput.value[] = \"New value\"  # Set value\n\n\n\n\n\n","category":"type"},{"location":"api/#Select","page":"API Reference","title":"Select","text":"","category":"section"},{"location":"api/#ShoelaceWidgets.SLSelect","page":"API Reference","title":"ShoelaceWidgets.SLSelect","text":"SLSelect(values; label=\"\", index=0)\n\nCreates a dropdown select widget with reactive selection tracking.\n\nFields\n\nlabel::String - Label text displayed above the dropdown\noptions::Observable{Vector{Hyperscript.Node}} - Observable containing the option elements\nvalues::Vector{T} - Array of selectable values\nindex::Observable{Int} - Observable containing the currently selected index (1-based)\nvalue - Computed property returning values[index[]] (the currently selected value)\n\nMethods\n\npush!(select, value) - Add a new option\nempty!(select) - Remove all options\npopat!(select, i) - Remove option at index i\n\nExamples\n\n# Create select with string options\nselect = SLSelect([\"Option 1\", \"Option 2\", \"Option 3\"]; label=\"Choose one\", index=1)\n\n# Access selected value\nprintln(select.value)  # Returns \"Option 1\"\n\n# Change selection\nselect.index[] = 2\n\n# Add new option dynamically\npush!(select, \"Option 4\")\n\n\n\n\n\n","category":"type"},{"location":"api/#Button","page":"API Reference","title":"Button","text":"","category":"section"},{"location":"api/#ShoelaceWidgets.SLButton","page":"API Reference","title":"ShoelaceWidgets.SLButton","text":"SLButton(label; disabled=false, variant=nothing)\n\nCreates a clickable button widget with reactive state management.\n\nFields\n\nvalue::Observable{Bool} - Observable that triggers (set to true) when button is clicked\ndisabled::Observable{Bool} - Observable controlling whether button is disabled\nlabel::String - Button text label\nloading::Observable{Bool} - Observable controlling loading spinner state\nvariant::Union{String, Nothing} - Button style variant (e.g., \"primary\", \"success\", \"danger\")\n\nExamples\n\n# Create button\nbtn = SLButton(\"Click Me\"; variant=\"primary\")\n\n# React to button clicks\non(btn.value) do _\n    println(\"Button was clicked!\")\nend\n\n# Disable button\nbtn.disabled[] = true\n\n# Show loading state\nbtn.loading[] = true\n\n\n\n\n\n","category":"type"},{"location":"api/#Radio","page":"API Reference","title":"Radio","text":"","category":"section"},{"location":"api/#ShoelaceWidgets.SLRadio","page":"API Reference","title":"ShoelaceWidgets.SLRadio","text":"SLRadio(value; disabled=false, object=nothing)\n\nRepresents a single radio button option within a radio group.\n\nFields\n\nvalue::String - Display text for the radio button\ndisabled::Bool - Whether this option is disabled\nobject::Any - Optional associated data object\n\nExample\n\nradio1 = SLRadio(\"Option A\"; object=1)\nradio2 = SLRadio(\"Option B\"; object=2, disabled=true)\n\n\n\n\n\n","category":"type"},{"location":"api/#ShoelaceWidgets.SLRadioGroup","page":"API Reference","title":"ShoelaceWidgets.SLRadioGroup","text":"SLRadioGroup(values; label=\"\", index=0)\n\nCreates a radio button group widget with reactive selection tracking.\n\nFields\n\nlabel::String - Label text displayed above the radio group\noptions::Observable{Vector{Hyperscript.Node}} - Observable containing the radio button elements\nvalues::Vector{SLRadio} - Array of SLRadio options\nvalue::Observable{String} - Observable containing the selected index as a string\nindex - Computed property returning the currently selected index (Int or nothing)\nobject - Computed property returning the associated object of the selected radio\n\nMethods\n\npush!(group, radio) - Add a new radio button\nempty!(group) - Remove all radio buttons\npopat!(group, i) - Remove radio button at index i\nsetproperty!(group, :index, i) - Set selection by index\n\nExamples\n\n# Create radio group\nradios = [\n    SLRadio(\"Small\"; object=\"S\"),\n    SLRadio(\"Medium\"; object=\"M\"),\n    SLRadio(\"Large\"; object=\"L\")\n]\ngroup = SLRadioGroup(radios; label=\"Select size\", index=1)\n\n# Access selected value\nprintln(group.index)   # Returns 1\nprintln(group.object)  # Returns \"S\"\n\n# Change selection\ngroup.index = 2\n\n\n\n\n\n","category":"type"},{"location":"api/#Dialog","page":"API Reference","title":"Dialog","text":"","category":"section"},{"location":"api/#ShoelaceWidgets.SLDialog","page":"API Reference","title":"ShoelaceWidgets.SLDialog","text":"SLDialog(content; label=\"\")\n\nCreates a modal dialog widget that can be shown or hidden.\n\nFields\n\nvalue::Observable{Hyperscript.Node} - Observable containing the dialog content\nlabel::String - Dialog title/header text\nopen::Observable{Bool} - Observable controlling dialog visibility\n\nExamples\n\n# Create dialog with content\ndialog = SLDialog(DOM.div(\"This is dialog content\"); label=\"My Dialog\")\n\n# Show dialog\ndialog.open[] = true\n\n# Hide dialog\ndialog.open[] = false\n\n# Update content dynamically\ndialog.value[] = DOM.div(\"New content\")\n\n\n\n\n\n","category":"type"},{"location":"api/#Tree","page":"API Reference","title":"Tree","text":"","category":"section"},{"location":"api/#ShoelaceWidgets.SLTree","page":"API Reference","title":"ShoelaceWidgets.SLTree","text":"SLTree(items)\n\nCreates a hierarchical tree menu widget with reactive selection tracking.\n\nFields\n\nvalues::Vector{SLTreeItem} - Array of root-level tree items\nvalue::Observable{String} - Observable containing the selected item's text\n\nConstruction Methods\n\nUsing SLTreeItem objects:\n\ntree = SLTree([\n    SLTreeItem(\"Folder A\", [\n        SLTreeItem(\"File 1\"),\n        SLTreeItem(\"File 2\")\n    ]),\n    SLTreeItem(\"Folder B\", [SLTreeItem(\"File 3\")])\n])\n\nUsing simplified nested syntax (strings and pairs):\n\ntree = SLTree([\n    \"Deciduous\" => [\n        \"Birch\",\n        \"Maple\" => [\"Field\", \"Red\", \"Sugar\"],\n        \"Oak\"\n    ],\n    \"Coniferous\" => [\"Cedar\", \"Pine\", \"Spruce\"]\n])\n\nSelection\n\n# Monitor selection changes\non(tree.value) do selected\n    println(\"Selected: \", selected)\nend\n\n# Programmatically select item\ntree.value[] = \"Maple\"\n\n\n\n\n\n","category":"type"},{"location":"api/#ShoelaceWidgets.SLTreeItem","page":"API Reference","title":"ShoelaceWidgets.SLTreeItem","text":"SLTreeItem(value)\nSLTreeItem(value, children)\n\nRepresents a single item in a tree structure.\n\nFields\n\nvalue::String - Display text for the tree item\nvalues::Vector{SLTreeItem} - Child tree items\n\nExamples\n\n# Leaf node\nitem = SLTreeItem(\"File.txt\")\n\n# Node with children\nfolder = SLTreeItem(\"Documents\", [\n    SLTreeItem(\"Report.pdf\"),\n    SLTreeItem(\"Notes.txt\")\n])\n\n\n\n\n\n","category":"type"},{"location":"api/#UI-Element-Functions","page":"API Reference","title":"UI Element Functions","text":"","category":"section"},{"location":"api/#Tab-Components","page":"API Reference","title":"Tab Components","text":"","category":"section"},{"location":"api/#ShoelaceWidgets.sl_tab_group","page":"API Reference","title":"ShoelaceWidgets.sl_tab_group","text":"sl_tab_group(args...; kw...)\n\nCreates a Shoelace tab group component. Tab groups organize content into multiple panels with tab navigation.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShoelaceWidgets.sl_tab","page":"API Reference","title":"ShoelaceWidgets.sl_tab","text":"sl_tab(args...; kw...)\n\nCreates a Shoelace tab component. Tabs are used as navigation items within a tab group.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShoelaceWidgets.sl_tab_panel","page":"API Reference","title":"ShoelaceWidgets.sl_tab_panel","text":"sl_tab_panel(args...; kw...)\n\nCreates a Shoelace tab panel component. Tab panels contain the content associated with each tab.\n\n\n\n\n\n","category":"function"},{"location":"api/#Utility-Components","page":"API Reference","title":"Utility Components","text":"","category":"section"},{"location":"api/#ShoelaceWidgets.sl_tag","page":"API Reference","title":"ShoelaceWidgets.sl_tag","text":"sl_tag(args...; kw...)\n\nCreates a Shoelace tag component. Tags are used for labels, categories, and keyword indicators.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShoelaceWidgets.sl_format_date","page":"API Reference","title":"ShoelaceWidgets.sl_format_date","text":"sl_format_date(args...; kw...)\n\nCreates a Shoelace date formatting component. Formats dates according to specified locale and options.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShoelaceWidgets.sl_spinner","page":"API Reference","title":"ShoelaceWidgets.sl_spinner","text":"sl_spinner(args...; kw...)\n\nCreates a Shoelace spinner component. Spinners indicate loading or processing states.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShoelaceWidgets.sl_icon","page":"API Reference","title":"ShoelaceWidgets.sl_icon","text":"sl_icon(args...; kw...)\n\nCreates a Shoelace icon component. Icons provide visual representations from the Shoelace icon library.\n\n\n\n\n\n","category":"function"},{"location":"#ShoelaceWidgets.jl","page":"Home","title":"ShoelaceWidgets.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ShoelaceWidgets.jl provides Julia bindings for Shoelace web components, enabling you to create interactive web UIs in Julia using the Bonito.jl framework.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"ShoelaceWidgets\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To get started with ShoelaceWidgets.jl you simply need to include Bonito.jl.  The following example shows how to provide an input box.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ShoelaceWidgets\nusing Bonito\n\n# Create an input widget\ninput = SLInput(\"\"; label=\"Enter text:\", placeholder=\"Type something...\")\n\n# Create a Bonito app\napp = App() do session\n    DOM.html(\n        DOM.head(\n            get_shoelace()...\n        ),\n        DOM.body(\n            input\n        )\n    )\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"The get_shoelace() function returns the necessary Shoelace CSS and JavaScript includes that should be added to your document head.","category":"page"},{"location":"#More-Examples","page":"Home","title":"More Examples","text":"","category":"section"},{"location":"#Button","page":"Home","title":"Button","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create a button with click handling:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Create button\nbtn = SLButton(\"Click Me\"; variant=\"primary\")\n\n# Set up click handler\non(btn.value) do _\n    btn.loading[] = true\n    println(\"Button was clicked!\")\n    sleep(2)\n    btn.loading[] = false\nend\n\napp = App() do session\n    DOM.html(\n        DOM.head(\n            get_shoelace()...\n        ),\n        DOM.body(\n            btn\n        )\n    )\nend","category":"page"},{"location":"#Dropdown","page":"Home","title":"Dropdown","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create a dropdown select:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Create select widget\nselect = SLSelect([\"Small\", \"Medium\", \"Large\"]; label=\"Choose size\", index=1)\n\non(select.index) do i\n    println(\"Selected value: $(select.value)\")\nend\n\napp = App() do session\n    DOM.html(\n        DOM.head(\n            get_shoelace()...\n        ),\n        DOM.body(\n            select\n        )\n    )\nend","category":"page"},{"location":"#Available-Components","page":"Home","title":"Available Components","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ShoelaceWidgets.jl provides Julia wrappers for common Shoelace components:","category":"page"},{"location":"#Web-Components","page":"Home","title":"Web Components","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SLInput - Text input fields with various types\nSLSelect - Dropdown selection components\nSLButton - Interactive buttons\nSLRadio / SLRadioGroup - Radio button controls\nSLTree / SLTreeItem - Tree menu\nSLDialog - Dialog window","category":"page"},{"location":"#UI-Elements","page":"Home","title":"UI Elements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"sl_tab_group, sl_tab, sl_tab_panel - Tab navigation\nsl_tag - Tags for labels and categories\nsl_format_date - Date formatting\nsl_spinner - Loading indicators\nsl_icon - Icons from the Shoelace icon library","category":"page"},{"location":"#Learn-More","page":"Home","title":"Learn More","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Check out the API Reference for detailed documentation of all components\nVisit the Shoelace documentation to learn more about the underlying web components\nSee the Bonito.jl documentation for information about the Julia web framework","category":"page"}]
}
